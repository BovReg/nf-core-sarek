/*
 * -------------------------------------------------
 *  Nextflow config file for Sarek
 * -------------------------------------------------
 * Imported under the 'aws' Nextflow profile in nextflow.config
 * Defines reference genomes, using paths from s3
 * To be use with AWS Batch
 */

params {
  genome_base = params.genome == 'iGRCh37' ? "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh37" : params.genome == 'iGRCh38' ? "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38" : "s3://sarek-references/small"
  publishDirMode = 'copy'
  singleCPUMem  = 7.GB // To make the uppmax slurm copy paste work.
  localReportDir = 'Reports'
}

executor.name = 'awsbatch'
executor.awscli = '/home/ec2-user/miniconda/bin/aws'

/* Rolling files are currently not supported on s3 */
report.file = "${params.localReportDir}/Sarek_report.html"
timeline.file = "${params.localReportDir}/Sarek_timeline.html"
dag.file = "${params.localReportDir}/Sarek_DAG.svg"
trace.file = "${params.localReportDir}/Sarek_trace.txt"

process {
  executor = 'awsbatch'
  queue = params.awsqueue
  queue_tiny = params.awsqueue_tiny
  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 2
  cpus = 2
  memory = 16.GB

  withName:BuildBWAindexes {
  }
  withName:BuildReferenceIndex {
  }
  withName:BuildSAMToolsIndex {
  }
  withName:BuildVCFIndex {
  }
  withName:ConcatVCF {
    cpus = 1
    memory = {params.singleCPUMem}
  }
  withName:CreateIntervalBeds {
    cpus = 1
    memory = {params.singleCPUMem}
  }
  withName:CreateRecalibrationTable {
    cpus = 10
    memory = {params.singleCPUMem * 8 * task.attempt}
  }
  withName:MapReads {
    cpus = 16
    memory = 64.GB
  }
  withName:MarkDuplicates {
		// Actually the -Xmx value should be kept lower
    cpus = 5
    memory = {5 * params.singleCPUMem}
  }
  withName:MergeBams {
    cpus = 5
    memory = {2 * params.singleCPUMem * task.attempt}
  }
  withName:RecalibrateBam {
    cpus = 8
    memory = {params.singleCPUMem * 8 * task.attempt}
  }
  withName:RunAlleleCount {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  withName:RunAscat {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  withName:RunBamQCmapped {
    cpus = 6
    memory = 70.GB
  }
  withName:RunBamQCrecalibrated {
    cpus = 6
    memory = 70.GB
  }
  withName:RunBcftoolsStats {
    cpus = 1
    memory = {params.singleCPUMem * 2} // Memory is doubled so that it won't run two on the same instance
    // Use a tiny queue for this one, so storage doesn't run out
    queue = {queue_tiny}
  }
  withName:RunVcftools {
    cpus = 1
    memory = {params.singleCPUMem * 2} // Memory is doubled so that it won't run two on the same instance
    // Use a tiny queue for this one, so storage doesn't run out
    queue = {queue_tiny}
  }
  withName:RunConvertAlleleCounts {
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  withName:RunFastQC {
    cpus = 2 // FastQC is only capable of running one thread per fastq file.
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunFreeBayes {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
  }
  withName:RunHaplotypecaller {
    cpus = 1
    // Increase memory quadratically
    memory = {params.singleCPUMem * 2} // Memory is doubled so that it won't run two on the same instance
    // Use a tiny queue for this one, so storage doesn't run out
    queue = {queue_tiny}
  }
  withName:RunGenotypeGVCFs {
    cpus = 1
    memory = {params.singleCPUMem * 2} // Memory is doubled so that it won't run two on the same instance
    // Use a tiny queue for this one, so storage doesn't run out
    queue = {queue_tiny}
  }
  withName:RunManta {
  }
  withName:RunMultiQC {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunMutect2 {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
  }
  withName:RunSamtoolsStats {
    cpus = 1
  }
  withName:RunSingleManta {
    cpus = 16
    memory = {params.singleCPUMem * 16}    
  }
  withName:RunSingleStrelka {
    cpus = 16
    memory = {params.singleCPUMem * 16}    
  }
  withName:RunSnpeff {
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  withName:RunStrelka {
  }
  withName:RunVEP {
    cpus = 16
    memory = {params.singleCPUMem * 16}
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
}
