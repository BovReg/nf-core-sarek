/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 * Nextflow config file for Docker
 * -------------------------------------------------
 * Used for the pipeline on Docker.
 * Modify for your own usage.
 * -------------------------------------------------
 */

docker {
  enabled = true
}

env {
  NXF_OPTS="-Xms1g -Xmx4g"
}

executor {
  pollInterval = '30 sec'
  queueSize = 1
}

params {
  runTime       = 2.h
  singleCPUMem  = 1.5.GB

  genome = 'GRCh37'
  genomes {
    'GRCh37' {
      bundleDir   = '/home/max/ReferenceAssemblies/hg38make/b37'
      vardictHome = '/dev/null'
    }
    'GRCh38' {
      bundleDir   = '/home/max/ReferenceAssemblies/GRCh38'
      vardictHome = '/dev/null'
    }
  }
}

process {
  cpus = 8
  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3
  memory = 15.GB
  time = 1.h

  $ConcatVCF {
    container = 'maxulysse/concatvcf:1.1'
  }
  $CreateIntervals {
    container = 'maxulysse/gatk:1.1'
    time = {params.runTime * task.attempt}
  }
  $CreateRecalibrationTable {
    container = 'maxulysse/gatk:1.1'
    time = {params.runTime * task.attempt}
  }
  $MapReads {
    container = 'maxulysse/mapreads:1.1'
    time = {params.runTime * task.attempt}
  }
  $MarkDuplicates {
    container = 'maxulysse/picard:1.1'
    time = {params.runTime * task.attempt}
    cpus = 1
    memory = {params.singleCPUMem * 8 * task.attempt}
  }
  $MergeBams {
    container = 'maxulysse/samtools:1.1'
    time = {params.runTime * task.attempt}
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
  }
  $RealignBams {
    container = 'maxulysse/gatk:1.1'
    time = {params.runTime * task.attempt}
  }
  $RecalibrateBam {
    container = 'maxulysse/gatk:1.1'
    time = {params.runTime * task.attempt}
  }
  $RunAlleleCount {
    container = 'maxulysse/runallelecount:1.1'
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunAscat {
    container = 'maxulysse/runascat:1.1'
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunConvertAlleleCounts {
    container = 'maxulysse/runconvertallelecounts:1.1'
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunFastQC {
    container = 'maxulysse/fastqc:1.1'
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
// $RunFreeBayes {
//   module = ['bioinfo-tools', 'java/sun_jdk1.8.0_40', 'freebayes/1.0.2']
//   time = {params.runTime * task.attempt}
//   cpus = 1
//   memory = {params.singleCPUMem * 4 * task.attempt}
// }
  $RunHaplotypecaller {
    container = 'maxulysse/gatk:1.1'
    time = {params.runTime * task.attempt}
    cpus = 1
    memory = {params.singleCPUMem * 8 *task.attempt}
  }
  $RunManta {
    container = 'maxulysse/runmanta:1.1'
  }
  $RunMultiQC {
    container = 'maxulysse/multiqc:1.1'
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  $RunMutect1 {
    container = 'maxulysse/mutect1:1.1'
    time = {params.runTime * task.attempt}
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunMutect2 {
    container = 'maxulysse/gatk:1.1'
    time = {params.runTime * task.attempt}
    cpus = 1
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunSamtoolsStats {
    container = 'maxulysse/samtools:1.1'
    time = {params.runTime * task.attempt}
  }
  $RunSnpeff {
    container = 'maxulysse/snpeff:1.1'
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  $RunStrelka {
    container = 'maxulysse/strelka:1.1'
    time = {params.runTime * task.attempt}
  }
// $RunVardict {
//   module = ['bioinfo-tools', 'java/sun_jdk1.8.0_40', 'R/3.2.3', 'gcc/4.9.2', 'perl/5.18.4']
//   time = {params.runTime * task.attempt}
//   cpus = 1
//   memory = {params.singleCPUMem * 4 * task.attempt}
// }
}
