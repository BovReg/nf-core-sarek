/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 * Nextflow config file for CAW project
 * working on a local host
 * Adjust CPU and memory requirements according to your needs
 * -------------------------------------------------
 * Should be saved either within CAW installation
 * as nextflow.config, or with Nextflow installation 
 * as $NXF_HOME/config
 */

env {
  NXF_OPTS="-Xms1g -Xmx4g"
  NXF_WORK="/scratch"
}

process {
  executor = 'local'
  cpus = 16 
  memory = 110.GB
  time = 48.h

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxRetries = 3
  maxErrors = '-1'
  maxForks = 1

  $RunFastQC {
    module = ['bioinfo-tools', 'FastQC/0.11.5']
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }

  $MapReads {
    module = ['bioinfo-tools', 'bwa/0.7.13', 'samtools/1.3']
    time = {params.runTime * task.attempt}
  }

  $MergeBams {
    module = ['bioinfo-tools', 'samtools/1.3']
    time = {params.runTime * task.attempt}
    memory = {params.singleCPUMem * task.attempt}
  }

  // Environment modules for specific process
  $MergeBams.module = ['bioinfo-tools', 'samtools/1.3']
  $MarkDuplicates.module = ['bioinfo-tools', 'picard/2.0.1']
  $CreateIntervals.module = ['java/sun_jdk1.8.0_40']
  $RealignBams.module = ['java/sun_jdk1.8.0_40']
  $CreateRecalibrationTable.module = ['java/sun_jdk1.8.0_40']
  $RecalibrateBam.module = ['java/sun_jdk1.8.0_40']
  $RunHaplotypecaller.module = ['bioinfo-tools', 'java/sun_jdk1.8.0_92']
  $RunMutect1.module = ['bioinfo-tools', 'java/sun_jdk1.7.0_25', 'mutect/1.1.5']
  $RunMutect2.module = ['bioinfo-tools', 'java/sun_jdk1.8.0_40']
  $RunVardict.module = ['bioinfo-tools', 'java/sun_jdk1.8.0_40', 'R/3.2.3', 'gcc/4.9.2', 'perl/5.18.4']
  $RunFreeBayes.module = ['bioinfo-tools', 'java/sun_jdk1.8.0_40', 'freebayes/1.0.2']
  $ConcatVCF.module = ['bioinfo-tools', 'java/sun_jdk1.8.0_92']
  $RunStrelka.module = ['bioinfo-tools']
  $RunManta.module = ['bioinfo-tools', 'samtools/1.3', 'manta/1.0.3']
  $RunAlleleCount.module = ['bioinfo-tools', 'alleleCount']
  $RunAscat.module = ['R/3.2.3']

  // time for specific process
  $MergeBams.time = {params.runTime * task.attempt}
  $MarkDuplicates.time = {params.runTime * task.attempt}
  $CreateIntervals.time = {params.runTime * task.attempt}
  $RealignBams.time = {params.runTime * task.attempt}
  $CreateRecalibrationTable.time = {params.runTime * task.attempt}
  $RecalibrateBam.time = {params.runTime * task.attempt}
  $RunHaplotypecaller.time = {params.runTime * task.attempt}
  $RunMutect1.time = {params.runTime * task.attempt}
  $RunMutect2.time = {params.runTime * task.attempt}
  $RunVardict.time = {params.runTime * task.attempt}
  $RunFreeBayes.time = {params.runTime * task.attempt}
  $RunStrelka.time = {params.runTime * task.attempt}

  // cpus for specific process
  $ConcatVCF.cpus = 1
  $MarkDuplicates.cpus = 1
  $RunHaplotypecaller.cpus = 1
  $RunMutect1.cpus = 1
  $RunMutect2.cpus = 1
  $RunFreeBayes.cpus = 1
  $RunVardict.cpus = 1
  $RunAlleleCount.cpus = 1
  $RunConvertAlleleCounts.cpus = 1
  $RunAscat.cpus = 1

  // memory for specific process
  $MarkDuplicates.memory = {params.singleCPUMem * 8 * task.attempt}
  $RunHaplotypecaller.memory = {params.singleCPUMem * 4 *task.attempt}
  $RunMutect1.memory = {params.singleCPUMem * 2 * task.attempt}
  $RunMutect2.memory = {params.singleCPUMem * 2 * task.attempt}
  $RunFreeBayes.memory = {params.singleCPUMem * 4 * task.attempt}
  $RunVardict.memory = {params.singleCPUMem * 4 * task.attempt}
  $RunAlleleCount.memory = {params.singleCPUMem * 2 * task.attempt}
  $RunConvertAlleleCounts.memory = {params.singleCPUMem * 2 * task.attempt}
  $RunAscat.memory = {params.singleCPUMem * 2 * task.attempt}
}

params {
  runTime       = 48.h
  singleCPUMem  = 8.GB // for processes that are using more memory but a single CPU only.


  // Change the files/directories according to your local setup
  genome        = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/human_g1k_v37_decoy.fasta'
  genomeIndex   = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/human_g1k_v37_decoy.fasta.fai'
  genomeDict    = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/human_g1k_v37_decoy.dict'
  cosmic        = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/b37_cosmic_v74.noCHR.sort.4.1.vcf'
  cosmicIndex   = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/b37_cosmic_v74.noCHR.sort.4.1.vcf.idx'
  dbsnp         = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/dbsnp_138.b37.vcf'
  dbsnpIndex    = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/dbsnp_138.b37.vcf.idx'
  kgIndels      = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/1000G_phase1.indels.b37.vcf'
  kgIndex       = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/1000G_phase1.indels.b37.vcf.idx'
  millsIndels   = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/Mills_and_1000G_gold_standard.indels.b37.vcf'
  millsIndex    = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/Mills_and_1000G_gold_standard.indels.b37.vcf.idx'
  intervals     = "/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/centromeres.list"
  acLoci        = '/sw/data/uppnex/ToolBox/ReferenceAssemblies/hg38make/bundle/2.8/b37/1000G_phase3_20130502_SNP_maf0.3.loci'
  snpeffDb      = 'GRCh37.75'
  vardictHome   = '/sw/apps/bioinfo/VarDictJava/1.4.5/milou/VarDictJava/'
}
