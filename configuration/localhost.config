/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 * Nextflow config file for CAW project
 * -------------------------------------------------
 * Configuration for running on a single UPPMAX node
 * such as milou or bianca
 * -------------------------------------------------
 */

env {
  NXF_WORK="/scratch"
}

params {
  singleCPUMem  = 8.GB
  totalMemory = 104.GB
}

process {
  cpus = 1
  maxForks = 16
  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3
  memory = {params.singleCPUMem}

  // These processes are defined in buildReferences.nf

  $BuildBWAindexes {
    maxForks = 2
    memory = {params.totalMemory}  // TODO This is likely too high
  }
  $BuildPicardIndex {
    maxForks = 2
    memory = {params.totalMemory}  // TODO This is likely too high
  }
  $BuildSAMToolsIndex {
    maxForks = 2
    memory = {params.totalMemory}  // TODO This is likely too high
  }
  $BuildVCFIndex {
    maxForks = 2
    memory = {params.totalMemory}  // TODO This is likely too high
  }

  // These processes are defined in main.nf

  $ConcatVCF {
    cpus = 16
    memory = {params.totalMemory}
  }
  $CreateRecalibrationTable {
    cpus = 16
    memory = {params.totalMemory}
  }
  $IndelRealigner {
    maxForks = 2
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $MapReads {
    cpus = 16
    memory = {params.totalMemory}
  }
  $MarkDuplicates {
    maxForks = 2
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $MergeBams {
    cpus = 16
    memory = {params.totalMemory}
  }
  $RealignerTargetCreator {
    maxForks = 2
    cpus = 4
    memory = {params.singleCPUMem * 4 * task.attempt}
  }
  $RecalibrateBam {
    maxForks = 2
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunAlleleCount {
    maxForks = 2
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunAscat {
    maxForks = 2
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunBamQC {
    cpus = 16
    memory = {params.totalMemory}
  }
  $RunBcftoolsStats {
    maxForks = 2
  }
  $RunConvertAlleleCounts {
    maxForks = 2
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunFastQC {
    maxForks = 2
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  $RunFreeBayes {
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunHaplotypecaller {
    memory = {params.singleCPUMem * task.attempt * task.attempt } // this way the memory will increase quadratically as 8G, 32G, 72G
  }
  $RunGenotypeGVCFs {
    maxForks = 2
    memory = {params.singleCPUMem}
  }
  $RunManta {
    cpus = 16
    memory = {params.totalMemory}
  }
  $RunMultiQC {
    maxForks = 2
    memory = {params.singleCPUMem}
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  $RunMutect1 {
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunMutect2 {
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunSamtoolsStats {
    maxForks = 2
  }
  $RunSnpeff {
    maxForks = 2
    memory = {params.totalMemory}  // TODO Does SnpEff really require that much?
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
  $RunStrelka {
    cpus = 16
    memory = {params.totalMemory}
  }
  $RunVEP {
    maxForks = 2
    memory = {params.totalMemory}  // TODO Does VEP really require that much?
    errorStrategy = { task.exitStatus == 143 ? 'retry' : 'ignore' }
  }
}
