/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  Nextflow config file for Amazon Web Services
 * -------------------------------------------------
 * Imported under the 'aws' Nextflow profile in nextflow.config
 * Defines reference genomes, using iGenome paths from s3
 * Uses docker for software depedencies.
 */

docker {
  enabled = true
}

params {
  singleCPUMem  = 8.GB
  totalMemory = 32.GB // change to 240 on irma
  genome_base = params.genome == 'GRCh37' ? 's3://caw-references/grch37/' : params.genome == 'GRCh38' ? 's3://caw-references/grch38/' : 's3://caw-references/smallgrch37/'
}

process {
  executor = 'ignite'
  // Resources based on a typical AWS m4.2xlarge EC2 instance
  // To customize)
  memory = 32.GB
  time = 240.h
  // Default process resources

  // A process may use one core,
  cpus = 1

  // 8 GB of memory,
  memory = {params.singleCPUMem}

  // and 8 of them are allowed to be launched simultaneously.
  maxForks = 8

  errorStrategy = {task.exitStatus == 143 ? 'retry' : 'terminate'}
  maxErrors = '-1'
  maxRetries = 3

  // These processes are defined in buildReferences.nf

  $BuildBWAindexes {
    memory = {params.totalMemory} // TODO This is likely too high
  }
  $BuildPicardIndex {
    memory = {params.totalMemory} // TODO This is likely too high
  }
  $BuildSAMToolsIndex {
    memory = {params.totalMemory} // TODO This is likely too high
  }
  $BuildVCFIndex {
    memory = {params.totalMemory} // TODO This is likely too high
  }

  // These processes are defined in main.nf

  $ConcatVCF {
    cpus = 8
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
  $CreateRecalibrationTable {
    cpus = 8
    memory = {params.totalMemory}
  }
  $IndelRealigner {
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $MapReads {
    cpus = 8
    memory = {params.totalMemory}
  }
  $MarkDuplicates {
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $MergeBams {
    cpus = 8
    memory = {params.totalMemory}
  }
  $RealignerTargetCreator {
    cpus = 4
    memory = {params.singleCPUMem * 4 * task.attempt}
  }
  $RecalibrateBam {
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunAlleleCount {
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunAscat {
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunBamQC {
    cpus = 8
    memory = {params.totalMemory}
  }
  $RunBcftoolsStats {
  }
  $RunConvertAlleleCounts {
    memory = {params.singleCPUMem * 2 * task.attempt}
  }
  $RunFastQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  $RunFreeBayes {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunHaplotypecaller {
    // Increase memory quadratically
    memory = {params.singleCPUMem * task.attempt * task.attempt}
  }
  $RunGenotypeGVCFs {
  }
  $RunManta {
    cpus = 8
    memory = {params.totalMemory}
  }
  $RunMultiQC {
  }
  $RunMutect1 {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunMutect2 {
    cpus = 1
    memory = {params.singleCPUMem * task.attempt}
  }
  $RunSamtoolsStats {
  }
  $RunSingleManta {
    cpus = 8
    memory = {params.totalMemory}
  }
  $RunSingleStrelka {
    cpus = 8
    memory = {params.totalMemory}
  }
  $RunSnpeff {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    memory = {params.totalMemory} // TODO Does SnpEff really require that much?
  }
  $RunStrelka {
    cpus = 8
    memory = {params.totalMemory}
  }
  $RunVEP {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
    memory = {params.totalMemory} // TODO Does VEP really require that much?
  }
}
